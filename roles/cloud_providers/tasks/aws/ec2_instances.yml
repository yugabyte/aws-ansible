- name: find ami instance-id
  ec2_ami_info:
    owners: "aws-marketplace"
    filters:
       "product-code": "{{ instance_product_code }}" 
    region: "{{ region }}"
  register: amis

- name: print out AMIs to terminal window
  debug:
    var: amis
    
- name: get the latest ami as per the aws market place product code
  set_fact:
    server01_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: count az
  set_fact:
    az_count: "{{ subnets | map(attribute='az') | list | length }}"
  
- name: create one master per AZ
  ec2:
   image: "{{ server01_ami.image_id }}"
   wait: yes
   instance_type: "{{ type_instance }}"
   region: "{{ region }}"
   group_id: "{{ security_group_ids }}"
   vpc_subnet_id: "{{ item }}"
   key_name: "{{ keypair.key.name }}"
   volumes:
     - device_name: "{{ device_name }}"
       volume_type: "{{ vol_type }}"
       volume_size: "{{ vol_size }}"
   count_tag:
     Env: "{{ ec2_tag }}_master"
     Name: "{{ ec2_tag }}_master_{{ index }}"
   instance_tags:
     Env: "{{ ec2_tag }}_master"
     Name: "{{ ec2_tag }}_master_{{ index }}"
   exact_count: "1"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
  register: ec2_master_info
  loop: "{{ subnet_ids|flatten(levels=1) }}"
  loop_control:
    index_var: index

- name: filter master nodes
  set_fact:
    ec2_masters: "{{ ec2_master_info.results | map(attribute='tagged_instances') | list }}"

- name: Create EC2 Instances for Yugabyte DB
  ec2:
   image: "{{ server01_ami.image_id }}"
   wait: yes
   instance_type: "{{ type_instance }}"
   region: "{{ region }}"
   group_id: "{{ security_group_ids }}"
   vpc_subnet_id: "{{ item }}"
   key_name: "{{ keypair.key.name }}"
   volumes:
     - device_name: "{{ device_name  }}"
       volume_type: "{{ vol_type }}"
       volume_size: "{{ vol_size }}"
   count_tag:
     Env: "{{ ec2_tag }}"
     Name: "{{ ec2_tag }}_{{ index }}"
   instance_tags:
     Env: "{{ ec2_tag }}"
     Name: "{{ ec2_tag }}_{{ index }}"
   exact_count: "{{ instances_per_subnet - 1 }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
  register: ec2_instances
  loop: "{{ subnet_ids|flatten(levels=1) }}"
  loop_control:
    index_var: index
    
- name: filter public ones
  set_fact:
    ec2_nodes: "{{ ec2_instances.results | map(attribute='tagged_instances') | list }}"

- name: Get all hosts
  set_fact:
    ec2_hosts: "{{ ec2_nodes + ec2_masters }}"
    
- name: debug
  debug: msg="{{ ec2_hosts }}"

- pause:
    seconds: 5
    
- name: Add EC2 instances as known hosts
  known_hosts:
    name: "{{ item[0].public_dns_name }}"
    key: "{{ lookup('pipe', 'ssh-keyscan -H {{ item[0].public_dns_name }}') }}"
  register: available
  until: "item[0].public_dns_name is defined"
  retries: 30
  delay: 5
  ignore_errors: True
  with_items:
    - "{{ ec2_hosts }}"

- name: Wait for SSH to come up
  delegate_to: "{{ item.public_dns_name }}"
  wait_for_connection:
    delay: 2
    timeout: 320
  with_items: "{{ ec2_hosts }}"
  become_user: "{{ ansible_user }}"

